import os, sys

sys.path.append(os.path.dirname(sys.path[0]))

from defs import *
from utils import rescale_branches as rb
from utils.runJobPower import run_job

CMD_PY = "python {script} -sub_model {sub_model} " \
         "indel_model {indel_model} -tree {tree} -n {n} -o {output}"

# the first version outputs indels lengths
#INDELIBLE_CMD = '/groups/itay_mayrose/danaazouri/powerLawProject/Programs/myINDELibleV1.03/myindelible {control_file}'
INDELIBLE_CMD = '/groups/itay_mayrose/danaazouri/powerLawProject/Programs/INDELibleV1.03/src/indelible {control_file}'

FLAG = "INDELIBLE_END"
N_SIMULATIONS = 30

CONTROL_FILE_NAME = "control.txt"
CONTROL_FILE = """
[TYPE] AMINOACID 1

[SETTINGS]
	[phylipextension] 	phy
	[output]          	PHYLIP
	[fileperrep]      	TRUE
	[printrates] 		TRUE    

[MODEL] mymodelname
	[submodel] {submodel} 
	[indelmodel] POW {A} {max_gap_length}
	[indelrate] {IR}

[TREE] mytree {tree} 

[PARTITIONS] partitionname 
	[mytree mymodelname {root_length}]

[EVOLVE] partitionname {num_simulations} {output}
"""

def run_indelible(gene):
    indelible_cmd = INDELIBLE_CMD.format(gene=gene,
                                         control_file=CONTROL_FILE_NAME)
    # run_job.run_job(indelible_cmd, "job_indelible.sh")
    call(indelible_cmd.split(" "))

def fix_tree_branches(tree_path):
    # get the tree for the control file
    with open(tree_path, 'r') as f:
        tree = f.read().splitlines()[0]
    tree = rb.rescale_branches(tree)
    return tree

def create_control_file(model, tree, indel_model_file, output,
                        num_simulations, max_gap_len):

    indels = pd.read_csv(indel_model_file, header=0)

    rl = int(indels['rl'][0])
    a = indels['a'][0]
    ir = indels['ir'][0]
    max_gap = indels["max gap length"][0]

    # create the control file
    ctrl_file = CONTROL_FILE.format(submodel=model,
                                   A="{:.6f}".format(a),
                                   IR="{:.6f}".format(ir),
                                   tree=tree,
                                   root_length=rl,
                                   max_gap_length=max_gap,
                                   num_simulations=num_simulations,
                                   output=output)

    with open(CONTROL_FILE_NAME, 'w') as fout:
        fout.write(ctrl_file)

def main(tree_file, sub_model, indel_model_file, n_simulations, output):

    # read tree
    tree = fix_tree_branches(tree_file)

    # create control file
    create_control_file(sub_model, tree, indel_model_file,
                        n_simulations, output)

    # run indelible
    indelible_cmd = INDELIBLE_CMD.format(control_file=CONTROL_FILE_NAME)
    call(indelible_cmd.split())

    # create a flag file
    #open(FLAG, 'w').close()

def run_on_paths_list(paths_file):

    df = pd.read_csv(paths_file)
    dirs = df[PATH_COL].tolist()

    for dir in dirs:
        os.chdir(dir)
        if not os.path.exists(SIMULATIONS_01):
            os.mkdir(SIMULATIONS_01)
        os.chdir(SIMULATIONS_01)

        indel_model = os.path.join(dir, SIMULATIONS_01, INDEL_MODEL_OUTPUT)
        tree = os.path.join(dir, TREE_RAXML_DIR, TREE_FILE)

        cmd = CMD_PY.format(script=os.path.realpath(__file__),
                            sub_model="WAG",
                            indel_model=indel_model,
                            tree=tree,
                            n=N_SIMULATIONS,
                            output="sim01")

        run_job(cmd, "job_indelible.sh")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-sub_model', required=False,
                        help='substitution model')
    parser.add_argument('-tree', required=False,
                        help='path to tree')
    parser.add_argument('-indel_model', required=False,
                        help='path to file contains indel parameters')
    parser.add_argument('-o', required=False,
                        help='output name')
    parser.add_argument('-n', required=False, type=int,
                        default=1, help='number of simulations')
    parser.add_argument('-f', required=False,
                        help='file of paths')
    parser.add_argument('-paths', action='store_true',
                        help='if specified - input is df with list of paths')
    args = parser.parse_args()

    if args.paths:
        run_on_paths_list(args.f)
    else:
        main(args.tree, args.sub_model, args.indel_model, args.n, args.o)

