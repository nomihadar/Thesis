import os, sys

sys.path.append(os.path.dirname(sys.path[0]))

from defs import *
from utils import rescale_branches as rb

# the first version outputs indels lengths
#INDELIBLE_CMD = '/groups/itay_mayrose/danaazouri/powerLawProject/Programs/myINDELibleV1.03/myindelible {control_file}'
INDELIBLE_CMD = '/groups/itay_mayrose/danaazouri/powerLawProject/Programs/INDELibleV1.03/src/indelible {control_file}'

FLAG = "INDELIBLE_END"

CONTROL_FILE_NAME = "control.txt"

CONTROL_FILE = """
[TYPE] AMINOACID 1

[SETTINGS]
	[phylipextension] 	phy
	[output]          	PHYLIP
	[fileperrep]      	TRUE
	[printrates] 		TRUE    

[MODEL] mymodelname
	[submodel] {submodel} 
	[indelmodel] POW {A} {max_gap_length}
	[indelrate] {IR}

[TREE] mytree {tree} 

[PARTITIONS] partitionname 
	[mytree mymodelname {root_length}]

[EVOLVE] partitionname {num_simulations} {output}
"""

def run_indelible(gene):
    indelible_cmd = INDELIBLE_CMD.format(gene=gene,
                                         control_file=CONTROL_FILE_NAME)
    # run_job.run_job(indelible_cmd, "job_indelible.sh")
    call(indelible_cmd.split(" "))

def get_indel_params(indel_file):
    indels = pd.read_csv(indel_file, header=0)
    rl = int(indels['rl'][0])
    a = indels['a'][0]
    ir = indels['ir'][0]
    parameters = (rl, a, ir)
    return parameters

def fix_tree_branches(tree_path):
    # get the tree for the control file
    with open(tree_path, 'r') as f:
        tree = f.read().splitlines()[0]
    tree = rb.rescale_branches(tree)
    return tree

def create_control_file(model, tree, indel_parameters, output,
                        num_simulations, max_gap_len):

    (rl, a, ir) = indel_parameters

    # create the control file
    ctrl_file = CONTROL_FILE.format(submodel=model,
                                   A="{:.10f}".format(a),
                                   IR="{:.10f}".format(ir),
                                   tree=tree,
                                   root_length=rl,
                                   max_gap_length=max_gap_len,
                                   num_simulations=num_simulations,
                                   output=output)

    with open(CONTROL_FILE_NAME, 'w') as fout:
        fout.write(ctrl_file)

def main(model, tree_file, indel_model, output,
         num_simulations, max_gap_len):

    # read tree
    tree = fix_tree_branches(tree_file)

    # get the indel parameters
    indel_parameters = get_indel_params(indel_model)

    # create control file
    create_control_file(model, tree, indel_parameters, output,
                         num_simulations, max_gap_len)

    # run indelible
    indelible_cmd = INDELIBLE_CMD.format(control_file=CONTROL_FILE_NAME)
    call(indelible_cmd.split())

    # create a flag file
    open(FLAG, 'w').close()
    

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-model', required=True,
                        help='substitution model')
    parser.add_argument('-tree', required=True,
                        help='path to tree')
    parser.add_argument('-indel_model', required=True,
                        help='path to file contains indel parameters')
    parser.add_argument('-o', required=True,
                        help='output name')
    parser.add_argument('-n', required=False, type=int,
                        default=1, help='number of simulations')
    parser.add_argument('-max_gap_len', required=False, type=int,
                        default=50, help='max length of a gap block')

    args = parser.parse_args()

    main(args.model, args.tree, args.indel_model, args.o,
          args.n, args.max_gap_len)

